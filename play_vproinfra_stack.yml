---
- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vpro_stack_vars/cloudvars
    - vpro_stack_vars/dict_vars
  tasks:
    - name: create vpro ec2 key
      ec2_key:
        name: vpro-key
        region: "{{region}}"
      register: vpro_key_info

#    - debug:
#        msg: "{{vpro_key_info}}"

    - name: save private key into file
      copy:
        content: "{{vpro_key_info.key.private_key}}"
        dest: "./login_key_vprofile.pem"
        mode: 0600
      when: vpro_key_info.changed

    - name: create security group for vprofile stack
      ec2_group:
        name: vpro_stack_sg
        description: Allow port 22 from everywhere and will port with in sg
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{myip}}"

          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: "{{myip}}"

          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: "{{myip}}"
      register: vprostacksg


    - name: create security group for vprofile stack
      ec2_group:
        name: vpro_stack_sg
        description: Allow port 22 from everywhere and will port with in sg
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{myip}}"

          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: "{{myip}}"

          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: "{{myip}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ansible_sg_id}}"

          - proto: all
            group_id: "{{vprostacksg.group_id}}"
      register: vprostacksg

#    - debug:
#        msg: "{{vprostacksg}}"

#    - debug:
#        msg: "{{vprostacksg.group_id}}"


    - name: creating all Instances, Nginx, Tomcat, RMQ, Memcashe, db
      ec2: 
        key_name: vpro-key
        region: "{{region}}"
        instance_type: "{{inst_t}}"
        image: "{{ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "{{item.value.name}}"
          project: vprofile
          owner: Devops Team
        exact_count: 1
        count_tag: 
          Name: "{{item.value.name}}"
          project: vprofile
          owner: Devops Team
        group_id: "{{vprostacksg.group_id}}"
        vpc_subnet_id: "{{item.value.subnet}}"
      loop: "{{ lookup('dict', inst_details)}}"
      register: vpro_ec2_info


#    - debug:
#        msg: "{{item.key}}"
#      loop: "{{ lookup('dict', inst_details)}}"

#    - debug:
#        msg: "{{item.values}}"
#      loop: "{{ lookup('dict', inst_details)}}"

#    - debug:
#        msg: "{{vpro_ec2_info}}"

    - debug:
        msg: "Public IP for the instance {{item.name}} is: {{item.IP}}"
    
      loop: 
       - name: Nginx01
         IP: "{{vpro_ec2_info.results[0].tagged_instances[0].private_ip}}"
       - name: Nginx02
         IP: "{{vpro_ec2_info.results[1].tagged_instances[0].private_ip}}"
       - name: Tomcat01
         IP: "{{vpro_ec2_info.results[2].tagged_instances[0].private_ip}}"
       - name: Tomcat02
         IP: "{{vpro_ec2_info.results[3].tagged_instances[0].private_ip}}"
       - name: RMQ01
         IP: "{{vpro_ec2_info.results[4].tagged_instances[0].private_ip}}"
       - name: Memcache01
         IP: "{{vpro_ec2_info.results[5].tagged_instances[0].private_ip}}"
       - name: db01
         IP: "{{vpro_ec2_info.results[6].tagged_instances[0].private_ip}}"